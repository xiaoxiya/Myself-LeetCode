题目描述：（动态规划法）
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.

class Solution {
    public int minPathSum(int[][] grid) {
        if(grid.length == 0 || grid[0].length == 0){
            return 0;
        }
        int m = grid.length, n = grid[0].length;
        int dp[] = new int[n];
        for (int i =0; i < m; i++){
            for (int j = 0; j<n; j++){
             if(j == 0) {
                 //同一列，只可能是上面下来
                 dp[j] = dp[j];
             } else if(i == 0) {
                 //同一行，只可能是左边过来
                 dp[j] = dp[j-1];
             } else {
                 dp[j] = Math.min(dp[j], dp[j-1]);
             }
                dp[j] += grid[i][j];
            }  
        }
        return dp[n-1];
    }
    
}
