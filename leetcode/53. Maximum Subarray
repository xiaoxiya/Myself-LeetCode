/*
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
*/

//改进的写法



//自己开始的写法，数组长度增大，无法再规定时间内返回值
class Solution {
    public int maxSubArray(int[] nums) {
        int len = nums.length;
        //存储长度为i的数组和里面最大的和
        int dp[] = new int[len];
        for(int i = 0; i < len; i++){
            //记录长度为i的每个子数组的和
            int temp[] = new int[len-i];
            for(int j = 0; j < temp.length; j++){
                temp[j] = sumArray(j,i+1,nums);
            }
           dp[i] = maxNum(temp);
        }
        return maxNum(dp);
    }
    //求数组和
    public int sumArray(int start,int len,int[] nums){
        int result = 0;
        for (int i = start; i < start+len; i++){
            result = result + nums[i];
        }
        return result;
    }
    //求多个数组和里面最大的那个
    public int maxNum(int[] nums){
        int result = nums[0];
        for(int i = 0; i<nums.length; i++){
            if(result < nums[i]){
                result = nums[i];
            }
        }
        return result;
    }
}
