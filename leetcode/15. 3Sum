/**
Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
*/

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
         Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < nums.length-1; i++) {
            int low = i+1, high = nums.length-1, sum = 0 - nums[i];
            while (low < high) {
                if (nums[low] + nums[high] == sum) {
                    if (!result.contains(Arrays.asList(nums[i], nums[low], nums[high])))
                    result.add(Arrays.asList(nums[i], nums[low], nums[high]));

                    low++;high--;
                } else if (nums[low] + nums[high] < sum) {
                    low++;
                } else high--;
            }
        }
        return result;
    }
}
//Runtime: 33 ms, faster than 55.63% of Java online submissions for 3Sum.
//Memory Usage: 48.2 MB, less than 81.27% of Java online submissions for 3Sum.
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
         Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < nums.length-1; i++) {
        //如果nums【i】和前面一个排好序的元素相同，证明前面的等于符合条件的已经进入了结果集中
             if ((i == 0) || (i != 0 && nums[i] != nums[i - 1])) {
            int low = i+1, high = nums.length-1, sum = 0 - nums[i];
            while (low < high) {
                if (nums[low] + nums[high] == sum) {
                    result.add(Arrays.asList(nums[i], nums[low], nums[high]));
                     //如果nums【low】和后面一个排好序的元素相同，证明后面的等于符合条件的结果集已经在本次循环中进入，
                     //不要要再一次变量该元素
                    while (low < high && nums[low] == nums[low + 1]) low++;
                    //如果nums【high】和前面一个排好序的元素相同，证明前面的等于符合条件的已经进入了结果集中，
                     //不要要再一次变量该元素，有一个本次循环固定的元素nums【i】先占一个位置，有一个元素相同即可判断为相同解
                    while (low < high && nums[high] == nums[high - 1]) high--;
                    low++;high--;
                } else if (nums[low] + nums[high] < sum) {
                    low++;
                } else high--;
            }
        }
        }
        return result;
    }
}
