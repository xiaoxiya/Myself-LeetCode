/**
Given an array nums and a value val, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Example 1:

Given nums = [3,2,2,3], val = 3,

Your function should return length = 2, with the first two elements of nums being 2.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,1,2,2,3,0,4,2], val = 2,

Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.

Note that the order of those five elements can be arbitrary.

It doesn't matter what values are set beyond the returned length.
*/

//开始的做法。。。还需加油改进，提升思维能力
class Solution {
    public int removeElement(int[] nums, int val) {
        if (nums.length == 0) return 0;
        int len = nums.length;
        int temp = 0;
        for (int i = 0; i < len; i++) {
            if (nums[i] == val) temp++;
        }
        for (int i = 0; i < len; i++) {
            for (int j = i+1; j < len; j++){
            int tmp = 0;
            if (nums[i] == val && i < len-1) {
                tmp = nums[i];
                nums[i] = nums[j];
                nums[j] = tmp;
            }  
        }
          
        }
        return len-temp;
    }
}

//改进后的做法
class Solution {
    public int removeElement(int[] nums, int val) {
    //使用两个变量来控制循环
        int i = 0;
        for (int j =0; j < nums.length; j++) {
        //当出现不等于val的原数组值，改变在原数组中的顺序，最后返回不等于val的值的个数
            if (nums[j] != val) {
                nums[i] = nums[j];
                i++;
            }
        }
        return i;
    }
}
