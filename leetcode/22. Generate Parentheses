//回溯算法解法
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> generateList = new ArrayList();
        backtrack(generateList, "", 0, 0, n);
        return generateList;
    }
    
    public void backtrack(List<String> result, String s,int open, int close, int max) {
        if(s.length() == max * 2) {
            result.add(s);
        }
        
        if(open < max ) {
            backtrack(result, s+"(", open+1, close, max);
        }
        if(close < open) {
            backtrack(result, s+")", open, close+1, max);
        }
    }
 
}


class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> generateList = new ArrayList();
        generateAll(generateList,0,new char[n*2]);
        return generateList;
    }
    
    public void generateAll (List<String> result, int pos, char[] current) {
        if (pos == current.length){
            if(valid(current)){
                result.add(new String(current));
            }
            } else {
                current[pos] = '(';
                generateAll(result, pos+1, current);
                current[pos] = ')';
                generateAll(result, pos+1, current);
            }
    }
    
    public boolean valid(char[] current) {
        int balance = 0;
        for (char c: current) {
            if (c == '(') balance++;
            else balance--;
            if (balance < 0) return false;
        }
        return (balance == 0);
    }
}



